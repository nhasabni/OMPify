from tokenizer import Tokompiler


tokenizer = Tokompiler()

code = """
int main() {
    int r[2800 + 1];
    int i, k;
    int b, d;
    int c = 0;

    for (i = 0; i < 2800; i++) {
	r[i] = 2000;
    }
    r[i] = 0;

    for (k = 2800; k > 0; k -= 14) {
	d = 0;

	i = k;
	for (;;) {
	    d += r[i] * 10000;
	    b = 2 * i - 1;

	    r[i] = d % b;
	    d /= b;
	    i--;
	    if (i == 0) break;
	    d *= i;
	}
	printf("%.4d", c + d / 10000);
	c = d % 10000;
    }

    return 0;
}
"""

tokens = tokenizer.tokenize(code, lang='c')
ids = tokenizer.encode(code, lang='c')
reversed_idx = tokenizer.decode(ids)

print(tokens)
print(ids)
print(reversed_idx)


# ['int', 'func', '19', '(', ')', '{', 'int', 'arr', '60', '[', 'num', '473', '+', 'num', '37', ']', ';', 'int', 'var', '142', ',', 'var', '959', ';', 'int', 'var', '133', ',', 'var', '402', ';', 'int', 'var', '337', '=', 'num', '843', ';', 'for', '(', 'var', '142', '=', 'num', '843', ';', 'var', '142', '<', 'num', '473', ';', 'var', '142', '++', ')', '{', 'arr', '60', '[', 'var', '142', ']', '=', 'num', '768', ';', '}', 'arr', '60', '[', 'var', '142', ']', '=', 'num', '843', ';', 'for', '(', 'var', '959', '=', 'num', '473', ';', 'var', '959', '>', 'num', '843', ';', 'var', '959', '-=', 'num', '940', ')', '{', 'var', '402', '=', 'num', '843', ';', 'var', '142', '=', 'var', '959', ';', 'for', '(', ';', ';', ')', '{', 'var', '402', '+=', 'arr', '60', '[', 'var', '142', ']', '*', 'num', '444', ';', 'var', '133', '=', 'num', '384', '*', 'var', '142', '-', 'num', '37', ';', 'arr', '60', '[', 'var', '142', ']', '=', 'var', '402', '%', 'var', '133', ';', 'var', '402', '/=', 'var', '133', ';', 'var', '142', '--', ';', 'if', '(', 'var', '142', '==', 'num', '843', ')', 'break', ';', 'var', '402', '*=', 'var', '142', ';', '}', 'func', '617', '(', 'str', '859', ',', 'var', '337', '+', 'var', '402', '/', 'num', '444', ')', ';', 'var', '337', '=', 'var', '402', '%', 'num', '444', ';', '}', 'return', 'num', '843', ';', '}']
# [1111, 1122, 924, 1125, 1126, 1113, 1111, 1099, 278, 1103, 1116, 392, 1093, 1116, 248, 1104, 1124, 1111, 1127, 453, 1123, 1127, 810, 1124, 1111, 1127, 986, 1123, 1127, 440, 1124, 1111, 1127, 346, 1117, 1116, 609, 1124, 1079, 1125, 1127, 453, 1117, 1116, 609, 1124, 1127, 453, 1089, 1116, 392, 1124, 1127, 453, 1085, 1126, 1113, 1099, 278, 1103, 1127, 453, 1104, 1117, 1116, 523, 1124, 1114, 1099, 278, 1103, 1127, 453, 1104, 1117, 1116, 609, 1124, 1079, 1125, 1127, 810, 1117, 1116, 392, 1124, 1127, 810, 1078, 1116, 609, 1124, 1127, 810, 45, 1116, 813, 1126, 1113, 1127, 440, 1117, 1116, 609, 1124, 1127, 453, 1117, 1127, 810, 1124, 1079, 1125, 1124, 1124, 1126, 1113, 1127, 440, 1076, 1099, 278, 1103, 1127, 453, 1104, 1119, 1116, 379, 1124, 1127, 986, 1117, 1116, 522, 1119, 1127, 453, 1094, 1116, 248, 1124, 1099, 278, 1103, 1127, 453, 1104, 1117, 1127, 440, 39, 1127, 986, 1124, 1127, 440, 15, 1127, 986, 1124, 1127, 453, 50, 1124, 1112, 1125, 1127, 453, 1102, 1116, 609, 1126, 1087, 1124, 1127, 440, 24, 1127, 453, 1124, 1114, 1122, 935, 1125, 1106, 62, 1123, 1127, 346, 1093, 1127, 440, 1068, 1116, 379, 1126, 1124, 1127, 346, 1117, 1127, 440, 39, 1116, 379, 1124, 1114, 1105, 1116, 609, 1124, 1114]
# int func 89 ( ) { int arr 309 [ num 991 + num 157 ] ; int var 855 , var 249 ; int var 841 , var 459 ; int var 14 = num 144 ; for ( var 855 = num 144 ; var 855 < num 991 ; var 855 ++ ) { arr 309 [ var 855 ] = num 675 ; } arr 309 [ var 855 ] = num 144 ; for ( var 249 = num 991 ; var 249 > num 144 ; var 249 -= num 52 ) { var 459 = num 144 ; var 855 = var 249 ; for ( ; ; ) { var 459 += arr 309 [ var 855 ] * num 303 ; var 841 = num 699 * var 855 - num 157 ; arr 309 [ var 855 ] = var 459 % var 841 ; var 459 /= var 841 ; var 855 -- ; if ( var 855 == num 144 ) break ; var 459 *= var 855 ; } func 878 ( str 695 , var 14 + var 459 / num 303 ) ; var 14 = var 459 % num 303 ; } return num 144 ; }